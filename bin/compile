#!/usr/bin/env ruby
# Encoding: utf-8
# Cloud Foundry Java Buildpack
# Copyright 2013-2017 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

puts ("compile starting")

$stdout.sync = true
$stderr.sync = true
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'java_buildpack/buildpack'

file_path=File.expand_path(File.dirname(__FILE__))
puts "file_path: #{file_path}"

build_dir = ARGV[0]

JavaBuildpack::Buildpack.with_buildpack(build_dir, 'Compile failed with exception %s', &:compile)


### MATLAB start ###

$stdout.sync = true

puts ("MATLAB install starting")

# Create .MCR directory
matlab_dir = "#{build_dir}/.mcr"
matlab_dir_cmd = "mkdir #{matlab_dir}"
puts ">>> system: #{matlab_dir_cmd}"
system(matlab_dir_cmd)

# Copy splitted MCR files into .MCR directory
matlab_binary_split_files = File.join("#{file_path}", "../lib/mcr/NumericsMVRv91.tar.gz.*")
#puts "matlab_binary_split_files: #{matlab_binary_split_files}"
#xLibs_dir = File.join("#{file_path}", "../matlab-lib/xLibs")
copy_split_matlab_binary_cmd = "cp #{matlab_binary_split_files} #{matlab_dir}"
puts ">>> system: #{copy_split_matlab_binary_cmd}"
system(copy_split_matlab_binary_cmd)

# Merge the splitted MCR files into one .tar.gz file under .MCR directory
merge_split_matlab_binary_tar_files =  File.join("#{matlab_dir}", "NumericsMVRv91.tar.gz.*")
matlab_binary_tar_file = File.join("#{matlab_dir}", "NumericsMVRv91.tar.gz")
merge_split_matlab_binary_cmd = "cat #{merge_split_matlab_binary_tar_files} > #{matlab_binary_tar_file}"
puts ">>> system: #{merge_split_matlab_binary_cmd}"
system(merge_split_matlab_binary_cmd)

# Remove the Splitted MCR files
remove_matlab_binary_split_file =  File.join("#{matlab_dir}", "NumericsMVRv91.tar.gz.*")
remove_matlab_binary_split_cmd = "rm #{remove_matlab_binary_split_file}"
puts ">>> system: #{remove_matlab_binary_split_cmd}"
system(remove_matlab_binary_split_cmd)
#puts ("Cleaning matlab binaries - completed");

# Untar the compressed MCR tar file
untar_matlab_binary_cmd = "tar -zxf #{matlab_binary_tar_file} -C #{matlab_dir}"
puts ">>> system: #{untar_matlab_binary_cmd}"
system(untar_matlab_binary_cmd)
puts ("Matlab installation - completed");

# Remove the tar file
remove_matlab_binary_tar_cmd = "rm #{matlab_binary_tar_file}"
puts ">>> system: #{remove_matlab_binary_tar_cmd}"
system(remove_matlab_binary_tar_cmd)

puts ("MATLAB install finished")

### MATLAB end ###


puts ("compile finished")

$stdout.sync = true
puts ("File listing:")
# puts Dir['**/*.*']
require 'find'
#Find.find('.') { |f| puts File.absolute_path(f) }
#Find.find('./.mcr') { |f| puts File.absolute_path(f) }
#Find.find('../buildpacks/java-buildpack') { |f| puts File.absolute_path(f) }
#Find.find('../buildpacks/java-buildpack/lib/mcr') { |f| puts File.absolute_path(f) }
